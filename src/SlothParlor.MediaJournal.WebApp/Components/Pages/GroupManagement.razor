@page "/groups"
@rendermode InteractiveServer

@using SlothParlor.MediaJournal.Contracts.WatchGroup
@using SlothParlor.MediaJournal.Core.Journal

@inject IWatchGroupRepository WatchGroups

<h3>Watch groups</h3>

<div>
    <EditForm Model="@WatchGroupFormData" OnValidSubmit="@HandleValidSubmit">

        <label for="WatchGroupName">Group Name</label>
        <InputText id="WatchGroupName" @bind-Value="WatchGroupFormData.DisplayName" />

        <button type="submit">Create</button>
    </EditForm>
</div>

<div>
    <ul>
        @foreach(var group in watchGroups)
        {
            <li>@group.DisplayName</li>
        }
    </ul>
</div>

@code {
    private List<WatchGroupResult> watchGroups = new List<WatchGroupResult>();

    private WatchGroupInput WatchGroupFormData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshWatchGroups();
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        var requestProperties = (WatchGroupInput)context.Model;

        var result = await WatchGroups.CreateAsync(requestProperties);

        watchGroups.Add(result);
    }

    private async Task RefreshWatchGroups()
    {
        var data = await WatchGroups.GetAsync();
        watchGroups = data.ToList();
    }
}
